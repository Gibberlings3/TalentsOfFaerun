DEFINE_ACTION_FUNCTION prof BEGIN

	LAF include STR_VAR file=prof_tools.tph END
	OUTER_SET signal_prof_count=25
	LAF check_ini STR_VAR ini=discard_stat RET discard_stat=value END
	
	ACTION_IF FILE_EXISTS "%marker_loc%/dw_monk_2handed.mrk" BEGIN
		OUTER_SET 2h_monk=1
	END ELSE BEGIN
		OUTER_SET 2h_monk=0
	END
	
	
	// set up to externalize the proficiency system, and shift to externalized maxprof (otherwise it blocks signalling)
	
	LAF externalize_profsmax END

	// read in the prof map, to allow for modifications
	
	LAF prof_build_lookup INT_VAR overwrite=1 RET_ARRAY prof_lookup_array unused_profs profs_used_array profs_used_rows END
	
	// see if there are extra profs due to subrace component
	
	LAF detect_subrace_extra_profs RET subrace_extra_profs END
	
	// read in the component's choices of modification from profmod.2da
	
	LAF 2da_read STR_VAR file=profmod.2da location=data RET_ARRAY profmod_array=array END
	
	// read in Favored Soul and other 'virtual classes'
	
	LAF array_read STR_VAR file=prof_virtual_class.2da location=data RET_ARRAY virtual_class_array=array END
	
	// read in any modified starting proficiencies, and any virtual proficiencies
	
	LAF override_initial_profs RET_ARRAY starting_prof_override END
	
	// install functions
	
	COPY "%MOD_FOLDER%/%component_loc%/lua/prof_functions.lua" "override/m_dw_prf.lua" EVALUATE_BUFFER	
	LAF initialize_prof_component END

	// edit UI
	
	COPY_EXISTING "ui.menu" override
		LPF UI_alter_object STR_VAR object=CHARGEN_PROFICIENCIES object_type=menu patch=apply_default_profs END
		LPF UI_alter_object STR_VAR object=LEVELUP_PROFICIENCIES object_type=menu patch=apply_default_profs END
		LPF UI_alter_function STR_VAR function=proficiencyOrGeneralHelp patch=hide_prof_display END
	BUT_ONLY

	// parse clastext.2da and kitlist.2da to get kit/class IDs, setting virtual class entries in m_dw_prd while we're at it. (Safer to do it from clastext than from class.ids/kit.ids as this is what the engine looks at)

	LAF parse_clastext RET_ARRAY is_class id END
	LAF parse_kitlist RET_ARRAY parent_class END
	
	// parse weapprof.2da to build the LUA table and count the total number of extra proficiencies required
	
	LAF generate_weapprof_lua RET_ARRAY total_count END	

	// get racial weapons and read them into LUA
	
	LAF generate_raceweapon_lua RET race_count_max END

	// get kit weapons (and extra profs) and read them into LUA
	
	LAF generate_kitweapon_lua END
	LAF count_kitweapon_max RET kit_count_max END

	// get any extra kit prof slots
	
	LAF generate_extra_slot_lua END
	
	// record total reallocation count in LUA and in profs.2da
	
	LAF record_reallocation_count END
	
	// sort out weapon usability
	
	LAF make_weapons_usable END
	
	// allocate new proficiencies; update descriptions
	LAF allocate_new_proficiencies END
	
	// sort out clerics' favored weapons
	
	ACTION_IF FILE_EXISTS "%data_loc%/favored_weapons.2da" BEGIN
		LAF process_favored_weapons END
	END
	// apply manual tweaks
	
	LAF run STR_VAR file=manual_prof_edits END
	
	// externalize weapprof
	
	LAF externalize_weapprof END
	LAF externalize_profsmax END // need to do this again to upddate
	// update descriptions
	
	LAF check_ini STR_VAR ini=3e_weapon_update_description RET value END
	ACTION_IF value BEGIN
		LAF include STR_VAR file=profdoc.tph END
		LAF update_all_proficiency_descriptions END
	END
	
	// assign profs to NPCs
	
	LAF run STR_VAR file=prof_npc END
	
	
END


	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION detect_subrace_extra_profs RET subrace_extra_profs BEGIN	
	ACTION_IF FILE_EXISTS_IN_GAME "m_dw_sbd.lua" BEGIN
		COPY_EXISTING "m_dw_sbd.lua" "%workspace%"
			REPLACE_EVALUATE "dwMaxCount=\([0-9]+\)" BEGIN
				subrace_extra_profs="%MATCH1%"
			END
			""
		BUT_ONLY
	END ELSE BEGIN
		OUTER_SET subrace_extra_profs=0
	END
END
		
//////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION "apply_default_profs" BEGIN // patch function used by UI edit

	REPLACE_TEXTUALLY ~minusButtonClickable(currentChargenProficiency)~ ~minusButtonClickable(currentChargenProficiency) and dwDefaultProficiencyGuard(currentChargenProficiency)~
	REPLACE_TEXTUALLY ~getMinusFrame(8)~ ~dwProfMinusFrame()~

END	

//////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION "hide_prof_display" BEGIN // patch function used by UI edit

	REPLACE_TEXTUALLY EXACT_MATCH "chargen.levelingUp" "dwIsLevelling"

END	
	

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION parse_clastext RET_ARRAY is_class id BEGIN
	
	COPY_EXISTING - "clastext.2da" nowhere
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW clastext_contents colcount
		FOR (row=0;row<clastext_contents;++row) BEGIN
			READ_2DA_ENTRY_FORMER clastext_contents row 0 ident
			READ_2DA_ENTRY_FORMER clastext_contents row 1 classid
			READ_2DA_ENTRY_FORMER clastext_contents row 2 kitid
			PATCH_IF IS_AN_INT classid BEGIN
				PATCH_IF "%kitid%" STRING_EQUAL_CASE 16384 BEGIN
					SET $is_class("%ident%")=1
					SET $id("%ident%")=classid
				END ELSE BEGIN
					LOOKUP_IDS_SYMBOL_OF_INT parent_class class classid
					SPRINT $parent_class("%ident%") "%parent_class%"
				END
			END
		END
	BUT_ONLY
		
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION parse_kitlist RET_ARRAY parent_class BEGIN
	
	// get virtual class data
	LAF get_virtual_parent_classes RET_ARRAY virtual_parent_classes END
	
	// get main data from kitlist
	COPY_EXISTING - "kitlist.2da" nowhere
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW kitlist_contents colcount
		FOR (row=0;row<kitlist_contents;++row) BEGIN
			READ_2DA_ENTRY_FORMER kitlist_contents row 1 ident
			TO_UPPER ident
			PATCH_IF VARIABLE_IS_SET $virtual_parent_classes("%ident%") BEGIN
				SPRINT parent_class $virtual_parent_classes("%ident%")
			END ELSE BEGIN
				READ_2DA_ENTRY_FORMER kitlist_contents row 8 parent_id
				PATCH_IF IS_AN_INT parent_id BEGIN
					LOOKUP_IDS_SYMBOL_OF_INT parent_class class parent_id
					PATCH_IF "%parent_class%" STR_EQ "SORCERER" BEGIN
						SPRINT parent_class MAGE
					END
				END ELSE BEGIN
					SPRINT parent_class FIGHTER
				END
			END
			SPRINT $parent_class("%ident%") "%parent_class%"
			PATCH_IF VARIABLE_IS_SET $virtual_class_array("%parent_class%") BEGIN
				parent_number=$virtual_class_array("%parent_class%")
				READ_2DA_ENTRY_FORMER kitlist_contents row 0 kit_id
				INNER_ACTION BEGIN
					APPEND "m_dw_prd.lua" "dwProfKitRedirect[%kit_id%]=%parent_number%%WNL%"
				END
			END
		END

	ACTION_FOR_EACH class IN FIGHTER MAGE THIEF CLERIC FIGHTER_MAGE FIGHTER_CLERIC FIGHTER_THIEF CLERIC_MAGE CLERIC_THIEF MAGE_THIEF FIGHTER_MAGE_THIEF FIGHTER_MAGE_CLERIC DRUID RANGER PALADIN MONK CLERIC_RANGER FIGHTER_DRUID SHAMAN BARD BEGIN
		OUTER_SPRINT $parent_class("%class%") "%class%"
	END
	OUTER_SPRINT $parent_class("SORCERER") "MAGE"

END
		
		
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// This derives starting proficiencies from the existing weapprof.2da. It also sets the discard stat to allow 99 pips for all kits.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_ACTION_FUNCTION generate_weapprof_lua RET_ARRAY total_count BEGIN
		
	// parse weapprof.2da to generate LUA tables and count the number of proficiencies
	
	APPEND "m_dw_prd.lua" "dwStartingProfs={}"
	
	LAF get_weapprof_path RET weapprof_path END
	COPY "%weapprof_path%" "%weapprof_path%"
		COUNT_2DA_COLS colcount
		FOR (col=4;col<colcount;++col) BEGIN
			READ_2DA_ENTRY 0 (col - 1) (colcount - 1) header
			SPRINT $header("%col%") "%header%"
			PATCH_IF VARIABLE_IS_SET $is_class("%header%") BEGIN
				SET $header_is_class("%col%")=1
				SET $header_id("%col%")=$id("%header%")
				SET $total_count("%header%")=0
			END
		END
		READ_2DA_ENTRIES_NOW weapprof_contents colcount
		FOR (row=0;row<weapprof_contents;++row) BEGIN
			SPRINT lua_data ""
			READ_2DA_ENTRY_FORMER weapprof_contents row 1 prof_id
			PATCH_IF ( prof_id>=89 && prof_id<=115 ) BEGIN
				proceed=0
				PHP_EACH profs_used_rows AS name=>discard BEGIN
					proceed = proceed || ( $profs_used_array("%name%" "ID")=prof_id && !($profs_used_array("%name%" "TYPE") STR_EQ "STYLE") )
				END
				PATCH_IF proceed BEGIN
					FOR (col=4;col<colcount;++col) BEGIN
						// reading step
						READ_2DA_ENTRY_FORMER weapprof_contents row col prof
						SPRINT class $header("%col%")
						PATCH_IF VARIABLE_IS_SET $header_is_class("%col%") BEGIN
							SET id=$header_id("%col%")
							known=0
							PATCH_IF VARIABLE_IS_SET $starting_prof_override("%id%") BEGIN
								PATCH_IF VARIABLE_IS_SET $starting_prof_override("%id%" "%prof_id%") BEGIN
									known=1
								END							
							END ELSE BEGIN
								known=prof>0
							END
							PATCH_IF known BEGIN
								SPRINT header $header("%col%")
								SET $total_count("%header%")+=1
								PATCH_IF "%lua_data%" STRING_COMPARE_CASE "" BEGIN
									SPRINT lua_data "%lua_data%, "
								END
								SPRINT lua_data "%lua_data%[%id%]=true"
								// handle sorcerer hardcoding
								PATCH_IF id=1 BEGIN
									SPRINT lua_data "%lua_data%, [19]=true"
								END
							END
						END
					END	
					PHP_EACH virtual_class_array AS discard=>id BEGIN
						PATCH_IF VARIABLE_IS_SET $starting_prof_override("%id%" "%prof_id%") BEGIN
							PATCH_IF "%lua_data%" STRING_COMPARE_CASE "" BEGIN // this would apply if there's some weapon class used by a virtual class but no real class, which is what we call a low-probability scenario; still, harmless to allow for it
								SPRINT lua_data "%lua_data%, "
							END					
							SPRINT lua_data "%lua_data%[%id%]=true"
						END
					END
				END
				PATCH_IF "%lua_data%" STR_CMP "" BEGIN
					INNER_ACTION BEGIN
						APPEND "m_dw_prd.lua" ~dwStartingProfs[%prof_id%]={%lua_data%}~ KEEP_CRLF
					END	
				END
			END
			
			// discard stat
			PATCH_IF (prof_id=discard_stat) BEGIN
				SET_2DA_ENTRY row 2 colcount RESOLVE_STR_REF("Discard stat - should not be visible")
				SET_2DA_ENTRY row 3 colcount "-1"
				FOR (col=4;col<colcount;col+=1) BEGIN
					SET_2DA_ENTRY_LATER weapprof_contents_new row col 99
				END
			
			END
		END	
		SET_2DA_ENTRIES_NOW weapprof_contents_new colcount
		PRETTY_PRINT_2DA
	BUT_ONLY
	
	//sorcerer again
	
	OUTER_SET $total_count("SORCERER")=$total_count("MAGE")
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION generate_raceweapon_lua RET race_count_max BEGIN

	
	OUTER_SET race_count_max=0
	APPEND "m_dw_prd.lua" "dwRaceWeapons={}"
	LAF ini_read INT_VAR flat=1 STR_VAR file=raceweapons.ini location=data RET_ARRAY raceweapon_array=array END
	ACTION_PHP_EACH raceweapon_array AS race=>weapons BEGIN
		OUTER_SET race_id=IDS_OF_SYMBOL (race "%race%")
		OUTER_FOR (prof=89;prof<=115;++prof) BEGIN
			OUTER_SET $extra_race("%prof%")=0
		END
		OUTER_WHILE "%weapons%" STR_CMP "" BEGIN
			LAF return_first_entry STR_VAR list="%weapons%" separator="," RET weapon=entry weapons=list END
			ACTION_TO_UPPER weapon
			
			ACTION_IF VARIABLE_IS_SET $prof_lookup_array("%weapon%" "ID") BEGIN
				OUTER_SET id=$prof_lookup_array("%weapon%" "ID")
				OUTER_SET $extra_race("%id%")=1
			END ELSE BEGIN
				WARN "Unknown weapon %weapon% in raceweapons.ini"
			END
		END
		OUTER_SPRINT lua_line ""
		OUTER_SET count_here=0
		ACTION_PHP_EACH extra_race AS id=>active BEGIN
			ACTION_IF active BEGIN
				OUTER_SPRINT lua_line "%lua_line%[%id%]=true, "		
				OUTER_SET ++count_here
			END
		END
		APPEND "m_dw_prd.lua" ~dwRaceWeapons[%race_id%]={%lua_line%}~ KEEP_CRLF
		OUTER_SET race_count_max=(race_count_max<count_here)?count_here:race_count_max
	END
	
END


DEFINE_ACTION_FUNCTION generate_extra_slot_lua BEGIN

	
	LAF array_read STR_VAR file=kitslots.2da location=data RET_ARRAY array END
	ACTION_PHP_EACH array AS kit=>slots BEGIN
		LAF prof_add_kit_extra_slots INT_VAR slots STR_VAR kit END
	END



END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION generate_kitweapon_lua BEGIN
	
	// get kit-specific weapons and read them into LUA

	COPY_EXISTING - kitlist.2da nowhere
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		FOR (row=0;row<rowcount;++row) BEGIN
			READ_2DA_ENTRY row 0 colcount id
			READ_2DA_ENTRY row 1 colcount name
			TO_UPPER name
			SET $kit_id("%name%")=id
		END
	BUT_ONLY

	LAF ini_read INT_VAR flat=1 STR_VAR file=kitweapons.ini location=data RET_ARRAY kitweapon_array=array END
	ACTION_PHP_EACH kitweapon_array AS kit=>weapons BEGIN
		ACTION_TO_UPPER kit
		OUTER_SET kit_id=$kit_id("%kit%")
		OUTER_FOR (prof=89;prof<=115;++prof) BEGIN
			OUTER_SET $extra_kit("%prof%")=0
		END
		OUTER_WHILE "%weapons%" STR_CMP "" BEGIN
			LAF return_first_entry STR_VAR list="%weapons%" separator="," RET weapon=entry weapons=list END
			ACTION_TO_UPPER weapon
			
			ACTION_IF VARIABLE_IS_SET $prof_lookup_array("%weapon%" "ID") BEGIN
				OUTER_SET id=$prof_lookup_array("%weapon%" "ID")
				OUTER_SET $extra_kit("%id%")=1
			END ELSE BEGIN
				WARN "Unknown weapon %weapon% in kitweapons.ini"
			END
		END
		OUTER_SPRINT lua_line ""
		OUTER_SET count_here=0
		ACTION_PHP_EACH extra_kit AS id=>active BEGIN
			ACTION_IF active BEGIN
				OUTER_SPRINT lua_line "%lua_line%[%id%]=true, "		
				OUTER_SET ++count_here
			END
		END
		APPEND "m_dw_prd.lua" ~dwKitWeapons[%kit_id%]={%lua_line%}~ KEEP_CRLF
	END

	
END

///////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION count_kitweapon_max RET kit_count_max BEGIN

	COPY_EXISTING "m_dw_prd.lua" "%workspace%"
		kit_count_max=0
		REPLACE_EVALUATE "dwKitWeapons\[[0-9]+\]={\(.*\)}" BEGIN
			INNER_PATCH "%MATCH1%" BEGIN
				kit_count_here=0
				REPLACE_EVALUATE "=true" BEGIN
					++kit_count_here
				END
				""
			END
			kit_count_max = (kit_count_max>kit_count_here)? kit_count_max : kit_count_here 
		END
		""
	BUT_ONLY

END
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION record_reallocation_count BEGIN

	// record number of points to reallocate, by class
	// currently we're trying setting this to a high constant
	
	
	APPEND "m_dw_prd.lua" "dwProfSignalNumByClass={}"
	
	// get intended number of level 1 profs
	
	COPY - "%MOD_FOLDER%/%component_loc%/data/profs.2da" nowhere
		LPF 2da_read RET_ARRAY int_rows=rows int_array=array END
		PHP_EACH int_rows AS class=>discard BEGIN
			SET profs=$int_array("%class%" FIRST_LEVEL)
			PATCH_IF IS_AN_INT profs BEGIN
				SET signal_total=signal_prof_count
				//SET signal_total = $total_count("%class%") + race_count_max + kit_count_max
				SET class_id=IDS_OF_SYMBOL (class "%class%")
				INNER_ACTION BEGIN
					APPEND "m_dw_prd.lua" "dwProfSignalNumByClass[%class_id%]=%signal_total%" KEEP_CRLF
				END
				SET $level_1_prof("%class%")=profs + subrace_extra_profs + signal_total
			END			
		END
	
	// copy prof.2da to data_loc_shared if it's not there already; overwrite with new slots
	
	ACTION_IF !FILE_EXISTS "%data_loc_shared%/profs.2da" BEGIN
		COPY_EXISTING "profs.2da" "%data_loc_shared%"
	END
	COPY "%data_loc_shared%/profs.2da" "%data_loc_shared%"
		LPF 2da_read RET_ARRAY array END
		PHP_EACH int_rows AS class=>discard BEGIN
			SET $array("%class%" FIRST_LEVEL)=$int_array("%class%" FIRST_LEVEL)
		END
		LPF 2da_write STR_VAR array default="0" END
	
	// update profs.2da with new level 1 prof data
	
	COPY_EXISTING "profs.2da" override
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		FOR (row=0;row<rowcount;++row) BEGIN
			READ_2DA_ENTRY row 0 colcount ident
			PATCH_IF VARIABLE_IS_SET $level_1_prof("%ident%") BEGIN
				SET temp=$level_1_prof("%ident%") 
				SET_2DA_ENTRY row 1 colcount temp
			END
		END
	BUT_ONLY
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION process_favored_weapons BEGIN

	// get a couple of strings
	OUTER_SPRINT favored_string @400
	OUTER_SPRINT advantage_string @401


	ACTION_CLEAR_ARRAY favored_prd_array
	// get the stored favored-class data
	ACTION_CLEAR_ARRAY favored_array
	LAF array_read STR_VAR case=upper file=favored_weapons.2da path="%data_loc%" RET_ARRAY favored_array=array END
	// get info on weapons
	LAF 2da_read STR_VAR file="weapprof.2da"  RET_ARRAY rows array END
	ACTION_PHP_EACH rows AS row=>discard BEGIN
		OUTER_SET number=$array("%row%" "ID")
		ACTION_IF (number>=89 && number<=110) || (number=115) BEGIN
			OUTER_SET $weapon_ids("%row%")=number
			OUTER_SET name_strref=$array("%row%" NAME_REF)
			ACTION_GET_STRREF name_strref name_string
			OUTER_SPRINT $weapon_name("%row%") "%name_string%"
		END
	END
	COPY_EXISTING kitlist.2da override
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW kitlist_data colcount
		FOR (row=0;row<kitlist_data;++row) BEGIN
			SPRINT god "NULL_NO_GOD"
			favored_soul=0
			READ_2DA_ENTRY_FORMER kitlist_data row 1 kit_label
			INNER_PATCH "%kit_label%" BEGIN
				PATCH_IF INDEX_BUFFER ("_FAVORED")>=0 BEGIN
					favored_soul=1
				END
				REPLACE_EVALUATE "DW_\([^_]+\)_.*" BEGIN
						SPRINT god "%MATCH1%"
				END
				""
				PATCH_MATCH "%kit_label%" WITH
					TALOS LATHANDER HELM BEGIN
						SPRINT god "%kit_label%"
					END
					OHTEMPUS BEGIN
						SPRINT god TEMPUS
					END
					OHTYR BEGIN
						SPRINT god TYR					
					END
					DEFAULT
				END
				PATCH_FOR_EACH hyphenated_god IN BANE_XVIM BHAAL_CYRIC MYRKUL_VELSHAROON BEGIN
					PATCH_IF INDEX ("%hyphenated_god%" "%kit_label%")>=0 BEGIN
						SPRINT god "%hyphenated_god%"
					END
				END
				PATCH_MATCH "%god%" WITH
					CYRIC BEGIN
						SPRINT god BHAAL_CYRIC
					END
					DEFAULT
				END
			END
			PATCH_IF VARIABLE_IS_SET $favored_array("%god%") BEGIN
				// collect more kit data
				READ_2DA_ENTRY_FORMER kitlist_data row 0 kit_id
				READ_2DA_ENTRY_FORMER kitlist_data row 4 desc_strref
				SPRINT weapon $favored_array("%god%")
				TO_UPPER weapon
				SET weapon_strref=$prof_lookup_array("%weapon%" "WEAPON_STRREF")
				GET_STRREF weapon_strref weapon_name
				SET weapon_number=$prof_lookup_array("%weapon%" "ID")
				// amend the description (not for favored souls)
				PATCH_IF !favored_soul BEGIN
					GET_STRREF desc_strref desc_string
					INNER_PATCH_SAVE desc_string_new "%desc_string%" BEGIN
						REPLACE_TEXTUALLY "^%advantage_string%" "%favored_string%%weapon_name%.%WNL%%WNL%%advantage_string%"
					END	
					INNER_ACTION BEGIN
						STRING_SET_EVALUATE desc_strref "%desc_string_new%"
					END
				END
				// list the weapon for bulk addition to m_dw_prd
				SET $favored_prd_array("%kit_id%")=weapon_number
			END
			
		END
	BUT_ONLY
	// flush favored_prd_array into m_dw_prd
	COPY_EXISTING "m_dw_prd.lua" override
		PHP_EACH favored_prd_array AS kit_id=>weapon_number BEGIN
			REPLACE_EVALUATE "\(dwKitWeapons\[%kit_id%\]={\)" BEGIN
				SET $favored_prd_array("%kit_id%")=0
			END
			"%MATCH1%[%weapon_number%]=true,"
		END
	BUT_ONLY
	ACTION_PHP_EACH favored_prd_array AS kit_id=>weapon_number BEGIN
		ACTION_IF weapon_number>0 BEGIN
			APPEND "m_dw_prd.lua" "dwKitWeapons[%kit_id%]={[%weapon_number%]=true}"
		END
	END











END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_ACTION_FUNCTION make_weapons_usable BEGIN

	ACTION_CLEAR_ARRAY remove_unusable
	COPY_EXISTING_REGEXP ".*\.itm" override
		READ_BYTE 0x31 prof_id
		READ_BYTE 0x18 flags
		READ_SHORT 0x1c cat
		PATCH_IF (prof_id>0 && (!(flags BAND 0b00000100)=0) || cat=5 || cat=14 || cat=31)  BEGIN // droppable, has prof associated or is ammo
			READ_BYTE 0x1e byte
			WRITE_BYTE 0x1e (byte BAND 0b00111111)
			WRITE_BYTE 0x1f 0
			READ_BYTE 0x20 byte
			WRITE_BYTE 0x20 (byte BAND 0b10000000)
			READ_BYTE 0x21 byte
			PATCH_IF (2h_monk || !(prof_id=93 || prof_id=99 || prof_id=102) ) BEGIN
				WRITE_BYTE 0x21 (byte BAND 0b10011111)				
			END ELSE BEGIN
				WRITE_BYTE 0x21 (byte BAND 0b10111111)	
			END
			GET_OFFSET_ARRAY fx_arr ITM_V10_GEN_EFFECTS
			delete_999=0
			PHP_EACH fx_arr AS fx_ind=>fx_off BEGIN
				PATCH_IF SHORT_AT fx_off=319 BEGIN
					READ_LONG fx_off+0x8 parameter2
					PATCH_IF parameter2=5 || parameter2=6 BEGIN
						WRITE_SHORT fx_off 999
						delete_999=1
						SPRINT $remove_unusable("%SOURCE_RES%") ""
					END
				END
			END
			PATCH_IF delete_999 BEGIN
				LPF DELETE_EFFECT INT_VAR match_opcode=999 END
			END
		END
	BUT_ONLY
	
	ACTION_IF FILE_EXISTS_IN_GAME "m_dw_itd.lua" BEGIN
		COPY_EXISTING "m_dw_itd.lua" override
			PHP_EACH remove_unusable AS resref=>discard BEGIN
				REPLACE_TEXTUALLY "dwUnusable\['%resref%'\].*[%WNL%%LNL%%MNL%]" ""
			END
	END
END

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*

Here's what we do:
- for classes, we apply the modifications in profmod; for monks specifically, if 2h_monk isn't set we don't grant proficiency with 2H weapons
- for kits, we basically do the same EXCEPT that we cross-ref with class, and if anything is NOT usable by the kit but IS usable by the class,
  we leave it unusable by the kit.
  
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION allocate_new_proficiencies BEGIN

	LAF get_weapprof_path RET weapprof_path END
	COPY "%weapprof_path%" "%weapprof_path%"
		LPF 2da_read RET_ARRAY weapprof_array=array weapprof_rows=rows weapprof_cols=columns END
		// make a copy, used as lookup for parent classes
		LPF array_copy STR_VAR array=weapprof_array RET_ARRAY weapprof_array_old=array END
		// set the favored soul virtual class (this is moot until such time as we introduce a favored soul with weapon restrictions, but may as well futureproof.)
		PHP_EACH profs_used_rows AS prof=>discard BEGIN
			SPRINT type $prof_lookup_array("%prof%" "TYPE")
			PATCH_MATCH "%type%" WITH
			MELEE MISSILE BEGIN
				SET $weapprof_array_old("%prof%" "FAVORED_SOUL")=1
			END
			DEFAULT
			END
		END
		// go through each column
		PHP_EACH weapprof_cols AS kit=>discard BEGIN
			PATCH_MATCH "%kit%" WITH
			"ID" "NAME_REF" "DESC_REF" BEGIN
			END
			DEFAULT
				TO_UPPER kit
				// get baseline levels in melee and missile (use club and sling; assume 1 if zero)
				SPRINT melee_prof_name $prof_lookup_array("CLUB" "NAME")
				SPRINT missile_prof_name $prof_lookup_array("SLING" "NAME")
				SPRINT prof_melee $weapprof_array("%melee_prof_name%" "%kit%")
				SPRINT prof_missile $weapprof_array("%missile_prof_name%" "%kit%")
				prof_melee=(IS_AN_INT prof_melee && prof_melee>0)?prof_melee:1
				prof_missile=(IS_AN_INT prof_missile && prof_missile>0)?prof_missile:1
				// pass through all profs
				PHP_EACH profs_used_rows AS prof_name=>discard BEGIN
					// get value
					SPRINT prof $weapprof_array("%prof_name%" "%kit%")
					prof=IS_AN_INT prof? prof: 0
					// compare to parent class
					SPRINT parent $parent_class("%kit%")
					SPRINT prof_parent $weapprof_array_old("%prof_name%" "%parent%")
					prof_parent=IS_AN_INT prof_parent? prof_parent :0
					PATCH_IF prof>=prof_parent BEGIN // patch only if >= parent
						SPRINT prof_type $profs_used_array("%prof_name%" "TYPE")
						PATCH_MATCH "%prof_type%" WITH
						"STYLE" BEGIN
							SPRINT profmod_row "%prof_name%"
						END
						"MELEE" BEGIN
							prof=prof>0?prof:prof_melee
							SPRINT profmod_row "GENERAL"
						END
						"MISSILE" BEGIN
							prof=prof>0?prof:prof_missile
							SPRINT profmod_row "GENERAL"
						END
						DEFAULT
							PATCH_FAIL "allocate_new_proficiencies: illegal entry %prof_type% for 'type' in prof_lookup_array for proficiency %prof_name%"
						END
						SPRINT write $profmod_array("%profmod_row%" "%prof%")
						write=IS_AN_INT write? write: prof					
						SET $weapprof_array("%prof_name%" "%kit%")=write
					END // end of patch block
				END // end of pass through profs
			END // end of DEFAULT block in pass through cols
		END // end of pass through cols
		LPF 2da_write STR_VAR array=weapprof_array END
		


END

DEFINE_ACTION_FUNCTION override_initial_profs 

	RET_ARRAY starting_prof_override
	BEGIN

	LAF 2da_read STR_VAR file=initial_prof_override.2da location=data RET_ARRAY data_array=array data_cols=columns data_rows=rows END
	ACTION_PHP_EACH data_cols AS header=>discard BEGIN
		ACTION_IF VARIABLE_IS_SET $virtual_class_array("%header%") BEGIN
			OUTER_SET class_number=$virtual_class_array("%header%")
		END ELSE BEGIN
			OUTER_SET class_number=IDS_OF_SYMBOL (class "%header%")
		END
		OUTER_SPRINT $override_header_array("%col%") "%class_number%"
		OUTER_SET $starting_prof_override("%class_number%")=1
		ACTION_PHP_EACH data_rows AS name=>discard BEGIN
			ACTION_IF $data_array("%name%" "%header%")=1 BEGIN
				OUTER_SET prof_id=$prof_lookup_array("%name%" "ID")
				OUTER_SET $starting_prof_override("%class_number%" "%prof_id%")=1			
			END
			
		END
	END
END



