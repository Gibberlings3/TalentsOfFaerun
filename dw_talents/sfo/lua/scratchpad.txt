function dwFindPortraitMatch()
	if dwAvoidRecursion then return end
	local dwPortraitNames={}
	local nmax=Infinity_GetNumCharacters() - 1
	-- count number of characters currently loaded
	local count=0
	for k,v in pairs (characters) do
		count=count + 1
	end
	if (count<nmax) then
		dwAvoidRecursion=true
		e:GetActiveEngine():OnLeftPanelButtonClick(4)
		for n=0,nmax do
			print('clicking portrait '..n)
			Infinity_OnPortraitLClick(n)
		end
		e:GetActiveEngine():OnLeftPanelButtonClick(0)
		Infinity_OnPortraitLClick(0)
		dwAvoidRecursion=false
	end
	
	local n=nil
	-- get names associated with portraits
	for n=0,nmax do
		str=Infinity_GetPortraitTooltip(n)
			if str then
			_,_,dwPortraitNames[n]=string.find(str,"([^\n]+)")
		end
	end
	-- get names associated with current IDs and match
	local dwPortraitLookup={}
	local dwPortraitLookupBackwards={}
	for id,char in pairs (characters) do
		for n=0,nmax do
			if (dwPortraitNames[n]==char.name) then
				dwPortraitLookup[id]=n
				dwPortraitLookupBackwards[n]=id
				print('Matched '..id..' with '..n)
			end
		end

	end
	return dwPortraitLookup,dwPortraitLookupBackwards
end

function dwXPAdjust()
	if dwAvoidRecursion then return end
	if not dwLevelUpLog then
		dwLevelUpLog={}
	end
	-- get the portrait lookup data
	local _,portraitLookup=dwFindPortraitMatch()
	-- cycle through all characters
	for myportrait,id_here in pairs(portraitLookup) do
		print('checking id '..id..' with portrait '..myportrait)
		proceed=true
		--if this is charname, give up
		if myportrait==0 then
			proceed=false
		end
		-- if we've already done this one, give up
		if dwLevelUpLog[id_here] then
			proceed=false
		end
		if proceed then
			-- log that we've done it
			dwLevelUpLog[id_here]=true
			-- find charname's XP
			local xptarget=0
			for n,id in pairs (portraitLookup) do
				if n==0 then
					xptarget=characters[id].level.xp
					print('xp target is '..xptarget)
				end
			end
			-- scale it down
			xptarget=(xptarget * 9) / 10	
			-- find my multiclass status
			local classcount=1
			if characters[id_here].classlevel.third then
				classcount=3
			else
				if characters[id_here].classlevel.second and characters[id_here].classlevel.second.active then
					classcount=2
				end
			end
			-- compare
			local myxp=classcount * characters[id_here].level.xp
			print('my xp is '..myxp)
			if (myxp<xptarget) then
				delta = xptarget - myxp
				C:Eval('AddXPObject(Myself,'..delta..')',myportrait)
			end
		end
	end
end
